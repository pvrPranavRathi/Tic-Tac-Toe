# -*- coding: utf-8 -*-
"""AI Lab 01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y1iuExNHLSuAbSxkxLP2ZATgOvQmcEZ1

Computer v/s Player
"""

import numpy as np

matrix = np.full((3, 3), '*', dtype=str)

def printmat(matrix):
    for i, row in enumerate(matrix):
        print(" | ".join(map(str, row)))
        if i < len(matrix) - 1:
            print("-" * (len(row) * 3))

# printmat(matrix)

import random

def is_valid_move(matrix, move):
    row, col = move
    return 0 <= row < 3 and 0 <= col < 3 and matrix[row, col] == '*'

def get_user_move():
    try:
        row = int(input("Enter row ")) - 1
        col = int(input("Enter column")) - 1
        return row, col
    except ValueError:
        print("Invalid input, enter the valid input")
        return get_user_move()

def get_computer_move(matrix):
    valid_pos = [(i, j) for i in range(3) for j in range(3) if matrix[i, j] == '*']
    return random.choice(valid_pos)

def determine_first_player():
    return random.choice([True, False])

def check_winner(matrix):
    for row in matrix:
        if all(cell == 'X' for cell in row):
            return 'X'
        elif all(cell == 'O' for cell in row):
            return 'O'

    for col in range(3):
        if all(matrix[row, col] == 'X' for row in range(3)):
            return 'X'
        elif all(matrix[row, col] == 'O' for row in range(3)):
            return 'O'

    if all(matrix[i, i] == 'X' for i in range(3)):
        return 'X'
    elif all(matrix[i, 2 - i] == 'O' for i in range(3)):
        return 'O'

    return None

player_turn = determine_first_player()

while True:
    printmat(matrix)

    if player_turn:
        print()
        print("Your turn:")
        move = get_user_move()
    else:
        print()
        print("Computer's turn:")
        move = get_computer_move(matrix)
        print(f"Computer chooses: {move}")

    if is_valid_move(matrix, move):
        row, col = move
        matrix[row, col] = 'X' if player_turn else 'O'
        winner = check_winner(matrix)
        if winner:
            printmat(matrix)
            if player_turn:
                print()
                print("You win! ðŸ¥³")
                break
            else:
                print()
                print("Computer wins ðŸ˜­")
                break
        elif np.all(matrix != '*'):
            printmat(matrix)
            print()
            print("It's a tie!")
            break
        player_turn = not player_turn
    else:
        print("Invalid move")



"""Computer v/s Computer"""

import numpy as np

matrix = np.full((3, 3), '*', dtype=str)

def printmat(matrix):
    for i, row in enumerate(matrix):
        print(" | ".join(map(str, row)))
        if i < len(matrix) - 1:
            print("-" * (len(row) * 3))

import random

def is_valid_move(matrix, move):
    row, col = move
    return 0 <= row < 3 and 0 <= col < 3 and matrix[row, col] == '*'

def get_computer_move(matrix):
    valid_pos = [(i, j) for i in range(3) for j in range(3) if matrix[i, j] == '*']
    return random.choice(valid_pos)

def determine_first_player():
    return random.choice([True, False])

def check_winner(matrix):
    for row in matrix:
        if all(cell == 'X' for cell in row):
            return 'X'
        elif all(cell == 'O' for cell in row):
            return 'O'

    for col in range(3):
        if all(matrix[row, col] == 'X' for row in range(3)):
            return 'X'
        elif all(matrix[row, col] == 'O' for row in range(3)):
            return 'O'

    if all(matrix[i, i] == 'X' for i in range(3)):
        return 'X'
    elif all(matrix[i, 2 - i] == 'O' for i in range(3)):
        return 'O'

    return None

computer1_turn = determine_first_player()

while True:
    printmat(matrix)

    if computer1_turn:
        print()
        print("1st Computer's turn:")
        move = get_computer_move(matrix)
        print(f"Computer1 chooses: {move}")
    else:
        print()
        print("2nd Computer's turn:")
        move = get_computer_move(matrix)
        print(f"Computer2 chooses: {move}")

    if is_valid_move(matrix, move):
        row, col = move
        matrix[row, col] = 'X' if computer1_turn else 'O'
        winner = check_winner(matrix)
        if winner:
            printmat(matrix)
            if computer1_turn:
                print()
                print("Computer1 wins ðŸ¥³")
                break
            else:
                print()
                print("Computer2 wins ðŸ¥³")
                break
        elif np.all(matrix != '*'):
            printmat(matrix)
            print()
            print("It's a tie!")
            break
        computer1_turn = not computer1_turn